// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

float scale;
float lac;
float persis;
int floatToIntMultiplier;
int octaves;
float2 offset;
int sizeX;
int sizeY;

RWStructuredBuffer<float> map;
RWStructuredBuffer<int> minMax;
StructuredBuffer<float2> RandOff;


//perlin noise inplementation, taken from github
float3 mod289(float3 x)
{
	return x - floor(x / 289.0) * 289.0;
}

float2 mod289(float2 x)
{
	return x - floor(x / 289.0) * 289.0;
}

float3 permute(float3 x)
{
	return mod289((x * 34.0 + 1.0) * x);
}

float3 taylorInvSqrt(float3 r)
{
	return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float2 v)
{
	const float4 C = float4(0.211324865405187, // (3.0-sqrt(3.0))/6.0
                             0.366025403784439, // 0.5*(sqrt(3.0)-1.0)
                            -0.577350269189626, // -1.0 + 2.0 * C.x
                             0.024390243902439); // 1.0 / 41.0
    // First corner
	float2 i = floor(v + dot(v, C.yy));
	float2 x0 = v - i + dot(i, C.xx);

    // Other corners
	float2 i1;
	i1.x = step(x0.y, x0.x);
	i1.y = 1.0 - i1.x;

    // x1 = x0 - i1  + 1.0 * C.xx;
    // x2 = x0 - 1.0 + 2.0 * C.xx;
	float2 x1 = x0 + C.xx - i1;
	float2 x2 = x0 + C.zz;

    // Permutations
	i = mod289(i); // Avoid truncation effects in permutation
	float3 p =
      permute(permute(i.y + float3(0.0, i1.y, 1.0))
                    + i.x + float3(0.0, i1.x, 1.0));

	float3 m = max(0.5 - float3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);
	m = m * m;
	m = m * m;

    // Gradients: 41 points uniformly over a line, mapped onto a diamond.
    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
	float3 x = 2.0 * frac(p * C.www) - 1.0;
	float3 h = abs(x) - 0.5;
	float3 ox = floor(x + 0.5);
	float3 a0 = x - ox;

    // Normalise gradients implicitly by scaling m
	m *= taylorInvSqrt(a0 * a0 + h * h);

    // Compute final noise value at P
	float3 g;
	g.x = a0.x * x0.x + h.x * x0.y;
	g.y = a0.y * x1.x + h.y * x1.y;
	g.z = a0.z * x2.x + h.z * x2.y;
	return (130.0 * dot(m, g)) * 0.5 + 0.5;
}


[numthreads(100,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int x = id.x / sizeY;
	int y = id.x % sizeY;
	
	float frequency = 1;
	float amplitude = 1;
	
	for (int o = 0; o < octaves; o++)
	{
		float sampleX = ((x / scale) + offset.x + RandOff[o].x) * frequency;
		float sampleY = ((y / scale) + offset.y + RandOff[o].y) * frequency;
		
		map[id.x] += amplitude * snoise(float2(sampleX, sampleY));

		frequency *= lac;
		amplitude *= persis;
	}
	
	int val = int(map[id.x] * floatToIntMultiplier);
	InterlockedMin(minMax[0], val);
	InterlockedMax(minMax[1], val);
}
